{"version":3,"sources":["components/InputField.tsx","components/SelectField.tsx","components/Character.tsx","App.tsx","index.tsx"],"names":["InputField","label","props","size","useField","field","error","isInvalid","htmlFor","name","id","SelectField","as","Select","value","Character","bank","name2","loading","setChars","setLoading","toast","useToast","useState","isOpen","setIsOpen","isDeleting","setIsDeleting","className","m","speed","thickness","color","isIndeterminate","onClick","document","getElementById","style","display","fetch","method","body","JSON","stringify","onClose","motionPreset","type","colorScheme","mr","then","res","json","data","title","description","status","duration","isClosable","catch","err","console","initialValues","gender","onSubmit","sex","mb","placeholder","required","pr","App","characters","setCharacters","isLoading","setIsLoading","handleEvent","useCallback","e","action","useEffect","window","addEventListener","removeEventListener","map","_","i","render","resetCSS"],"mappings":"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","file":"static/js/main.f9bcb964.chunk.js","sourcesContent":["import React, { InputHTMLAttributes } from \"react\";\r\nimport { useField } from \"formik\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n} from \"@chakra-ui/react\";\r\n\r\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  label: string;\r\n  name: string;\r\n};\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({\r\n  label,\r\n  size: _,\r\n  ...props\r\n}) => {\r\n  const [field, { error }] = useField(props);\r\n  return (\r\n    <FormControl isInvalid={!!error}>\r\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\r\n      <Input {...field} {...props} id={field.name} />\r\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\r\n    </FormControl>\r\n  );\r\n};\r\n","import React, { SelectHTMLAttributes } from \"react\";\r\nimport { Field, useField } from \"formik\";\r\nimport { FormControl, FormLabel, Select } from \"@chakra-ui/react\";\r\n\r\ntype SelectFieldProps = SelectHTMLAttributes<HTMLSelectElement> & {\r\n  label: string;\r\n  name: string;\r\n};\r\n\r\nexport const SelectField: React.FC<SelectFieldProps> = ({\r\n  label,\r\n  size: _,\r\n  ...props\r\n}) => {\r\n  const [field] = useField(props);\r\n  return (\r\n    <FormControl>\r\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\r\n      <Field as={Select} {...field} {...props} id={field.name}>\r\n        <option value=\"M\">Masculino</option>\r\n        <option value=\"F\">Feminino</option>\r\n      </Field>\r\n    </FormControl>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  ModalCloseButton,\r\n  Box,\r\n  Spinner,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { InputField } from \"./InputField\";\r\nimport { SelectField } from \"./SelectField\";\r\nimport { CharacterData } from \"../App\";\r\n\r\ninterface CharacterProps {\r\n  id?: number;\r\n  bank?: number;\r\n  name?: string;\r\n  name2?: string;\r\n  loading?: boolean;\r\n  setLoading?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setChars?: React.Dispatch<React.SetStateAction<CharacterData[]>>;\r\n}\r\n\r\nexport const Character: React.FC<CharacterProps> = ({\r\n  id,\r\n  bank,\r\n  name,\r\n  name2,\r\n  loading,\r\n  setChars,\r\n  setLoading,\r\n}) => {\r\n  const toast = useToast();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n\r\n  const handleDelete = () => {\r\n    setLoading!(true);\r\n    setIsDeleting(false);\r\n    fetch(\"http://vrp_spawn/DeleteCharacter\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ id }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        toast({\r\n          title: \"Personagem Deletado.\",\r\n          description: `O personagem ${name} ${name2} foi deletado com sucesso.`,\r\n          status: \"success\",\r\n          duration: 9000,\r\n          isClosable: true,\r\n        });\r\n        setLoading!(false);\r\n        setChars!(data);\r\n      })\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    // @ts-ignore\r\n    document.getElementById(\"root\").style.display = \"none\";\r\n    fetch(\"http://vrp_spawn/CharacterChosen\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ id }),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Fade>\r\n          <div className=\"character\">\r\n            <Spinner\r\n              m=\"auto\"\r\n              size=\"xl\"\r\n              speed=\"0.65s\"\r\n              thickness=\"4px\"\r\n              color=\"blue.500\"\r\n              isIndeterminate\r\n            />\r\n          </div>\r\n        </Fade>\r\n      ) : id ? (\r\n        <Fade>\r\n          <div className=\"character\">\r\n            <div className=\"info\">\r\n              <div className=\"name\">\r\n                #{id} {name} {name2}\r\n              </div>\r\n              <div className=\"bank\">\r\n                Banco:\r\n                <div className=\"detail\">${bank}</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"actions\">\r\n              <Button size=\"sm\" onClick={handlePlay}>\r\n                Jogar\r\n              </Button>\r\n              <Button size=\"sm\" onClick={() => setIsDeleting(true)}>\r\n                Deletar\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Fade>\r\n      ) : (\r\n        <Fade>\r\n          <div className=\"character empty\" onClick={() => setIsOpen(true)}>\r\n            Novo Personagem\r\n          </div>\r\n        </Fade>\r\n      )}\r\n\r\n      <Modal\r\n        isOpen={isDeleting}\r\n        onClose={() => setIsDeleting(false)}\r\n        size=\"xl\"\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Deletando Personagem</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            Tem certeza que deseja deletar o personagem {name} {name2}?\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              name=\"submit\"\r\n              type=\"submit\"\r\n              colorScheme=\"green\"\r\n              mr={2}\r\n              onClick={handleDelete}\r\n            >\r\n              Deletar\r\n            </Button>\r\n            <Button colorScheme=\"red\" onClick={() => setIsDeleting(false)}>\r\n              Cancelar\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      <Modal\r\n        size=\"xl\"\r\n        isOpen={isOpen}\r\n        onClose={() => setIsOpen(false)}\r\n        motionPreset=\"slideInBottom\"\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Criando Personagem</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Formik\r\n              initialValues={{ name: \"\", name2: \"\", gender: \"\" }}\r\n              onSubmit={({ name, name2, gender }) => {\r\n                setIsOpen(false);\r\n                // @ts-ignore\r\n                document.getElementById(\"root\").style.display = \"none\";\r\n                fetch(\"http://vrp_spawn/CharacterCreated\", {\r\n                  method: \"POST\",\r\n                  body: JSON.stringify({ name, name2, sex: gender }),\r\n                });\r\n              }}\r\n            >\r\n              <Form>\r\n                <Box mb={4}>\r\n                  <InputField\r\n                    name=\"name\"\r\n                    placeholder=\"Nome\"\r\n                    label=\"Nome\"\r\n                    required\r\n                  />\r\n                </Box>\r\n                <Box mb={4}>\r\n                  <InputField\r\n                    name=\"name2\"\r\n                    placeholder=\"Sobrenome\"\r\n                    label=\"Sobrenome\"\r\n                    required\r\n                  />\r\n                </Box>\r\n                <SelectField\r\n                  label=\"Sexo\"\r\n                  name=\"gender\"\r\n                  placeholder=\"Sexo\"\r\n                  required\r\n                />\r\n\r\n                <ModalFooter pr={0}>\r\n                  <Button\r\n                    name=\"submit\"\r\n                    type=\"submit\"\r\n                    colorScheme=\"green\"\r\n                    mr={2}\r\n                  >\r\n                    Criar\r\n                  </Button>\r\n                  <Button colorScheme=\"red\" onClick={() => setIsOpen(false)}>\r\n                    Cancelar\r\n                  </Button>\r\n                </ModalFooter>\r\n              </Form>\r\n            </Formik>\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { Box, Flex, Stack } from \"@chakra-ui/react\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Character } from \"./components/Character\";\n\nexport interface CharacterData {\n  id: number;\n  name: string;\n  name2: string;\n  bank: number;\n}\n\nconst App: React.FC = () => {\n  const [characters, setCharacters] = useState<CharacterData[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const handleEvent = useCallback((e: MessageEvent) => {\n    switch (e.data.action) {\n      case \"show\":\n        // @ts-ignore\n        document.getElementById(\"root\").style.display = \"block\";\n        break;\n    }\n  }, []);\n\n  useEffect(() => {\n    fetch(\"http://vrp_spawn/GetCharacters\", { method: \"POST\" })\n      .then((res) => res.json())\n      .then((data) => {\n        setCharacters([...data]);\n        setIsLoading(false);\n      })\n      .catch((err) => console.error(err));\n\n    window.addEventListener(\"message\", handleEvent);\n    return () => {\n      window.removeEventListener(\"message\", handleEvent);\n    };\n  }, []);\n\n  return (\n    <Flex id=\"characters\">\n      <Stack className=\"characters-stack\">\n        <Box className=\"name\">Angra City</Box>\n        <Box className=\"onboarding\">city.angra-rp.com.br</Box>\n      </Stack>\n\n      <div className=\"characters-grid\">\n        {[0, 1, 2, 3].map((_, i) => (\n          <Character\n            key={i}\n            loading={isLoading}\n            id={characters[i]?.id}\n            setChars={setCharacters}\n            setLoading={setIsLoading}\n            name={characters[i]?.name}\n            name2={characters[i]?.name2}\n            bank={characters[i]?.bank}\n          />\n        ))}\n      </div>\n    </Flex>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport App from \"./App\";\nimport { render } from \"react-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport \"./styles/global.scss\";\n\nrender(\n  <ChakraProvider resetCSS>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}